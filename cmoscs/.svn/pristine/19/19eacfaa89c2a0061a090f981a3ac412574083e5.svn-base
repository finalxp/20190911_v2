package cn.productivetech.cmos.zhongbao.utils;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.RandomAccessFile;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.nio.file.Files;

import org.apache.commons.io.monitor.FileAlterationListenerAdaptor;

/**
 * 语音接续文件夹监听工具类，
 * 监听语音接续文件夹文件的变化
 * @author: kenny_peng
 * @created:2019-04-09
 */
public class FileListenerUtils extends FileAlterationListenerAdaptor{   
	    @Override
	    public void onFileCreate(File file) {
	    	
	    	//添加问件时，判断文件是否可读（即判断文件是否传输完毕），可读时，发送解析txt请求
	    	if (Files.isReadable(file.toPath())) {//Files.isReadable(file.toPath())
	    		String param = "path=" + file.getAbsolutePath().replace("\\", "//");
	    		
	    		//发送url解析txt请求
	    		SendUrlUtils.sendPost("http://192.168.18.154:8080/processTxt", param);
	    		System.out.println("[新建]:" + file.getAbsolutePath());
			}
	    }
	    
	    @Override
	    public void onFileChange(File file) {
	    	
	    	//传输完毕后，会触发文件被修改，此事判断文件是否可读（即判断文件是否传输完毕），可读时，发送解析txt请求
	    	if (Files.isReadable(file.toPath())) {
	    		System.out.println("[修改]:" + file.getAbsolutePath());
	    	}
	    }
	    
	    /**
	     * 判断文件是否可读写
	     * @param file
	     * @return
	     */
		@SuppressWarnings({ "static-access", "resource", "unused" })
		private boolean isFileCanReadAndWrite(File file){
	    	try {
				RandomAccessFile randomAccessFile = new RandomAccessFile(file, "rw");
				FileChannel fileChannel = randomAccessFile.getChannel();
				FileLock fileLock = null;
				while (true) {
					try {
						fileLock = fileChannel.tryLock();
						break;
					} catch (Exception e) {
						try {
							Thread.currentThread().sleep(1000);
						} catch (InterruptedException e1) {
							return false;
						}
					}
				}
				return true;
			} catch (FileNotFoundException e) {
				e.printStackTrace();
				return false;
			}
	    }
	    
	}